---
// Zentrale Stelle für alle gemeinsam genutzten CSS-Dateien
import "../css/fonts.css";
import "../css/keyframes.css";
import "../css/darkmode.css";
// Komponenten-Importe
import Nav from "../components/Nav.astro";
import Iam from "../components/Iam.astro";
import Myself from "../components/Myself.astro";
import Projects from "../components/Projects.astro";
import Skills from "../components/Skills.astro";
import Contact from "../components/Contact.astro";
import Footer from "../components/Footer.astro";
import ScrollProgress from "../components/ui/ScrollProgress.astro";
// Layout für besseres SEO und Performance-Optimierung
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Portfolio">
  <div id="home"></div>
  <Nav />
  <ScrollProgress />

  <Iam />

  <div id="about">
    <Myself />
  </div>
    
  <Skills />
    
  <div id="projects">
    <Projects />
  </div>
  <div id="contact">
    <Contact />
  </div>

  <Footer />
    
  <!-- Fixierter Theme Toggle Button -->
  <button
    id="darkModeToggle"
    class="theme-toggle fixed z-50 p-3 rounded-full shadow-lg focus:outline-none"
    aria-label="Theme wechseln"
  >
    <!-- Icon wird per JavaScript eingefügt -->
  </button>
</BaseLayout>

<style>
  * {
    scroll-behavior: smooth;
    font-family: mono;
    padding: 0;
    margin: 0;
  }
  body {
    overflow-x: hidden;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    transition: background-color 0.3s ease, color 0.3s ease;
    padding-bottom: 80px; /* Platz für den fixierten Footer */
  }

  #about {
    position: relative;
    min-height: 100vh;
    z-index: 0;
  }
  #skills {
    min-height: 100vh;
  }
  #projects {
    position: relative;
    padding: 0px 0;
    background-size: 100%;  /* Von 500% auf 100% reduziert */
    background-repeat: no-repeat; 
    background-attachment: local; /* Von fixed auf local geändert für bessere Performance */
    background-position: center;
    /* Animation entfernt, um GPU-Last zu reduzieren */
    z-index: 0;
  }
  #contact {
    padding-top: -150px;
  }
  .blurred {
    filter: blur(5px);
  }
  
  /* Optimierte Scrollbar */
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px; /* Schmaler für bessere Performance */
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: tomato;
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background-color: #00000094;
    border-radius: 5px;
  }
  
  /* Theme Toggle Button Styling */
  .theme-toggle {
    bottom: 20px;
    right: 20px;
    padding: .9rem;
    width: 55px;
    background-color: var(--bg-secondary);
    border: 1px currentColor var(--border);
    color: var(--accent);
    transition: all 0.3s ease;
  }
  
  .theme-toggle:hover {
    box-shadow: 0 0 10px 2px var(--pulse-shadow-mid);    
    color: var(--accent);
    background-color: var(--bg-secondary);
    i{
      transform: scale(1.2); /* Von 1.5 auf 1.2 reduziert */
      transition: .3s; /* Von .5s auf .3s reduziert */
    }
  }
  
  .theme-toggle i {
    font-size: 1.5rem;
  }  
 
  @media (max-width: 768px) {
    .theme-toggle {
      bottom: 15px;
      right: 15px;
      padding: 0.75rem;
    }
    
    .theme-toggle i {
      font-size: 1.2rem;
    }
  }
</style>

<script>
  // Batteriespar-Modus dauerhaft aktivieren
  document.addEventListener("DOMContentLoaded", () => {
    // Setze den Batteriespar-Modus immer auf aktiv
    localStorage.setItem("battery-saving", "true");
  });

  // Dark Mode Logic
  document.addEventListener("DOMContentLoaded", () => {
    const darkModeToggle = document.getElementById("darkModeToggle");
    const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
    
    // Check for saved theme preference or use the system preference
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark" || (!savedTheme && prefersDarkScheme.matches)) {
      document.documentElement.classList.add("dark-mode");
      updateIcon(true);
    } else {
      document.documentElement.classList.remove("dark-mode");
      updateIcon(false);
    }
    
    // Toggle dark mode on click
    darkModeToggle.addEventListener("click", () => {
      const isDarkMode = document.documentElement.classList.toggle("dark-mode");
      localStorage.setItem("theme", isDarkMode ? "dark" : "light");
      updateIcon(isDarkMode);
    });
    
    // Update the icon
    function updateIcon(isDarkMode) {
      darkModeToggle.innerHTML = '';
      const icon = document.createElement('i');
      if (isDarkMode) {
        icon.className = 'fa-solid fa-sun';
        icon.setAttribute('title', 'Light Mode aktivieren');
      } else {
        icon.className = 'fa-solid fa-moon';
        icon.setAttribute('title', 'Dark Mode aktivieren');
      }
      darkModeToggle.appendChild(icon);
    }
  });
  
  // Optimized Navigation Highlighting - mit Throttling
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("div[id]");
    const navLinks = document.querySelectorAll("nav a");
    
    // Throttling-Funktion für bessere Scroll-Performance
    let lastScrollTime = 0;
    const throttleTime = 100; // ms zwischen Updates
    
    const observer = new IntersectionObserver(
      (entries) => {
        // Nur aktualisieren, wenn genug Zeit vergangen ist
        const now = Date.now();
        if (now - lastScrollTime < throttleTime) return;
        lastScrollTime = now;
        
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navLinks.forEach((link) => {
              if (link.getAttribute("href") === "#" + entry.target.id) {
                link.classList.add("active");
              } else {
                link.classList.remove("active");
              }
            });
          }
        });
      },
      {
        threshold: 0.1, 
        rootMargin: "0px 0px -60% 0px", 
      }
    );

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>

<script>
  // Performance-optimierte IntersectionObserver mit reduziertem Umfang
  document.addEventListener("DOMContentLoaded", () => {
    // Bei Energiesparmodus: Alle Elemente sofort anzeigen ohne Animationen
    document.querySelectorAll(".offscreen").forEach(el => 
      el.classList.add("in-view")
    );
  });
</script>

<script>
  // Performance-optimierte Verzögertes Laden von Skripten
  document.addEventListener("DOMContentLoaded", () => {
    // Funktion zum verzögerten Laden der Skripte (die nun im Batteriespar-Modus laufen)
    function loadDeferredScripts() {
      // Projekt-Karten-Effekt
      const projectScript = document.createElement('script');
      projectScript.src = '/scripts/projectCards.js';
      projectScript.defer = true;
      document.body.appendChild(projectScript);
      
      // Scroll-Effekte
      const scrollScript = document.createElement('script');
      scrollScript.src = '/scripts/scrollOpacityEffect.js';
      scrollScript.defer = true;
      document.body.appendChild(scrollScript);
    }
    
    // Verzögertes Laden nach einer kurzen Pause
    if (window.requestIdleCallback) {
      requestIdleCallback(() => loadDeferredScripts());
    } else {
      setTimeout(loadDeferredScripts, 1000);
    }
  });
</script>
