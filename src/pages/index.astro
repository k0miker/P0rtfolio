---
// Zentrale Stelle für alle gemeinsam genutzten CSS-Dateien
import "../css/fonts.css";
import "../css/keyframes.css";
import "../css/darkmode.css";
// FontAwesome importieren, um sicherzustellen, dass Symbole verfügbar sind
import "../css/fontawesome/css/fontawesome.css";
import "../css/fontawesome/css/all.min.css";
// Komponenten-Importe
import Nav from "../components/Nav.astro";
import Iam from "../components/Iam.astro";
import Myself from "../components/Myself.astro";
import Projects from "../components/Projects.astro";
import Skills from "../components/Skills.astro";
import Contact from "../components/Contact.astro";
import Footer from "../components/Footer.astro";
import ScrollProgress from "../components/ui/ScrollProgress.astro";
---

<html class="w-full" lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Portfolio</title>
  </head>
  <body class="w-full flex-col items-center content-center fadein2 custom-scrollbar">
    <div id="home"></div>
    <Nav />
    <ScrollProgress /> <!-- Position nach der Nav für korrektes Rendering -->

    <Iam />

    <div id="about">
      <Myself />
    </div>
    
    <Skills />
    
    <div id="projects" >
      <Projects />
    </div>
    <div id="contact">
      <Contact />
    </div>

    <Footer />
    
    <!-- Fixierter Theme Toggle Button -->
    <button
      id="darkModeToggle"
      class="theme-toggle fixed z-50 p-3 rounded-full shadow-lg focus:outline-none"
      aria-label="Theme wechseln"
    >
      <!-- Icon wird per JavaScript eingefügt -->
    </button>
    
    <!-- Performance-Modus Toggle -->
    <button
      id="performanceToggle"
      class="performance-toggle fixed z-50 p-3 rounded-full shadow-lg focus:outline-none"
      aria-label="Performance-Modus wechseln"
      title="Performance-Modus wechseln"
    >
      <!-- Icon wird jetzt per JavaScript eingefügt -->
    </button>
  </body>
</html>

<style>
  * {
    scroll-behavior: smooth;
    font-family: mono;
    padding: 0;
    margin: 0;
  }
  body {
    overflow-x: hidden;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    transition: background-color 0.3s ease, color 0.3s ease;
    padding-bottom: 80px; /* Platz für den fixierten Footer */
  }

  #about {
    position: relative;
    min-height: 100vh;
    z-index: 0; 
  }
  #skills {
    min-height: 100vh;
  }
  #projects {
    position: relative;
    padding: 0px 0;
    background-size: 500%;
    background-repeat: no-repeat; 
    background-attachment: fixed; 
    background-position: center;
    z-index: 0; 
  }
  #contact {
    padding-top: -150px;
  }
  .blurred {
    filter: blur(5px);
  }
  .custom-scrollbar::-webkit-scrollbar {
    width: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: tomato;
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background-color: #00000094;
    border-radius: 5px;
  }
  
  /* Theme Toggle Button Styling */
  .theme-toggle {
    bottom: 20px;
    right: 20px;
    padding: .9rem;
    width: 55px;
    background-color: var(--bg-secondary);
    border: 1px solid var(--border);
    color: var(--accent);
    transition: all 0.3s ease;
  }
  
  .theme-toggle:hover {
    box-shadow: 0 0 10px 2px var(--pulse-shadow-mid);    
    color: var(--accent);
    background-color: var(--bg-secondary);
  }
  .theme-toggle:hover i {
    transform: scale(1.5);
    transition: .5s;
  }
  
  .theme-toggle i {
    font-size: 1.5rem;
  }  
 
  @media (max-width: 768px) {
    .theme-toggle {
      bottom: 15px;
      right: 15px;
      padding: 0.75rem;
    }
    
    .theme-toggle i {
      font-size: 1.2rem;
    }
  }
  
  /* Performance Toggle Button Styling */
  .performance-toggle {
    bottom: 20px;
    left: 20px;
    padding: .9rem;
    width: 55px;
    background-color: var(--bg-secondary);
    border: 1px solid var(--border);
    color: var(--accent);
    transition: all 0.3s ease;
  }

  .performance-toggle i {
    font-size: 1.5rem;
    color: var(--accent);
    transition: transform 0.5s ease;
  }
  
  .performance-toggle:hover {
    box-shadow: 0 0 10px 2px var(--pulse-shadow-mid);
  }
  
  .performance-toggle:hover i {
    transform: scale(1.5);
  }
  
  @media (max-width: 768px) {
    .performance-toggle {
      bottom: 15px;
      left: 15px;
      padding: 0.75rem;
    }
    
    .performance-toggle i {
      font-size: 1.2rem;
    }
  }
</style>

<script>
  // Dark Mode Logic
  document.addEventListener("DOMContentLoaded", () => {
    const darkModeToggle = document.getElementById("darkModeToggle");
    const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
    
    // Check for saved theme preference or use the system preference
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark" || (!savedTheme && prefersDarkScheme.matches)) {
      document.documentElement.classList.add("dark-mode"); // Änderung: auf documentElement anwenden
      updateIcon(true);
    } else {
      document.documentElement.classList.remove("dark-mode"); // Änderung: auf documentElement anwenden
      updateIcon(false);
    }
    
    // Toggle dark mode on click
    darkModeToggle.addEventListener("click", () => {
      const isDarkMode = document.documentElement.classList.toggle("dark-mode"); // Änderung: auf documentElement anwenden
      localStorage.setItem("theme", isDarkMode ? "dark" : "light");
      updateIcon(isDarkMode);
    });
    
    // Update the icon
    function updateIcon(isDarkMode) {
      // Altes Icon entfernen
      darkModeToggle.innerHTML = '';
      
      // Neues Icon basierend auf Modus hinzufügen
      const icon = document.createElement('i');
      if (isDarkMode) {
        icon.className = 'fa-solid fa-sun';
        icon.setAttribute('title', 'Light Mode aktivieren');
      } else {
        icon.className = 'fa-solid fa-moon';
        icon.setAttribute('title', 'Dark Mode aktivieren');
      }
      darkModeToggle.appendChild(icon);
    }
  });
  
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("div[id]");
    const navLinks = document.querySelectorAll("nav a");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navLinks.forEach((link) => {
              if (link.getAttribute("href") === "#" + entry.target.id) {
                link.classList.add("active");
              } else {
                link.classList.remove("active");
              }
            });
          }
        });
      },
      {
        threshold: 0.1, 
        rootMargin: "0px 0px -60% 0px", 
      }
    );

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const boxes = document.querySelectorAll(".offscreen");

    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0.2,
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("in-view");
        } else {
          entry.target.classList.remove("in-view");
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions
    );

    boxes.forEach((offscreen) => {
      observer.observe(offscreen);
    });
  });
</script>
<script>
  // Zentrale Performance-Optimierung für Hintergrundbilder
  document.addEventListener("DOMContentLoaded", () => {
    // Liste aller Sektionen mit animierten Hintergründen
    const animatedSections = [
      document.getElementById("home-section"),
      document.getElementById("skills"),
      document.getElementById("contact-section"),
      document.getElementById("projects")
    ].filter(section => section !== null);
    
    // Intersection Observer für alle Sektionen
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Klasse hinzufügen/entfernen je nachdem, ob Element sichtbar ist
        if (entry.isIntersecting) {
          entry.target.classList.add("animate");
        } else {
          entry.target.classList.remove("animate");
        }
      });
    }, { 
      threshold: 0.1,  // Animation startet, wenn 10% der Sektion sichtbar sind
      rootMargin: "100px" // Etwas früher starten für flüssigeren Übergang
    });
    
    // Alle animierten Sektionen beobachten
    animatedSections.forEach(section => {
      if (section) observer.observe(section);
    });
  });
</script>
<script>
  // Performance-optimierte Animations- und Intersection Observer-Logik
  document.addEventListener("DOMContentLoaded", () => {
    // Zentralisierte IntersectionObserver-Konfiguration für bessere Performance
    const observerOptions = {
      rootMargin: "50px",
      threshold: 0.1,
    };
    
    // Ein einziger Observer für alle Animationseffekte
    const animationObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Animations-Klassen nur hinzufügen/entfernen wenn nötig
        if (entry.isIntersecting && !entry.target.classList.contains("in-view")) {
          entry.target.classList.add("in-view");
          // Staggered-Animation für Kinder-Elemente, falls vorhanden
          if (entry.target.hasAttribute("data-stagger-children")) {
            const children = entry.target.querySelectorAll(".stagger-item");
            children.forEach((child, index) => {
              // Mobile: Kleinere Verzögerungen verwenden
              const isMobile = window.innerWidth < 768;
              const delay = isMobile ? index * 0.05 : index * 0.1;
              (child as HTMLElement).style.transitionDelay = `${delay}s`;
            });
          }
        } else if (!entry.isIntersecting && entry.target.classList.contains("in-view")) {
          // Auf Mobile: Optimiere, indem wir Klassen nicht entfernen, wenn der Nutzer scrollt
          if (window.innerWidth >= 768) {
            entry.target.classList.remove("in-view");
          }
        }
      });
    }, observerOptions);
    
    // Alle animierbaren Elemente mit einem Observer beobachten
    const animatables = [
      ...document.querySelectorAll(".offscreen"),
      ...document.querySelectorAll(".animate-on-scroll"),
      document.getElementById("home-section"),
    document.getElementById("skills"),
      document.getElementById("contact-section"),
    document.getElementById("projects")
    ].filter(el => el !== null);
    
    // Animationen nur starten, wenn das Gerät leistungsstark genug ist
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    // Check if deviceMemory is available in the browser
    const hasDeviceMemory = 'deviceMemory' in navigator;
    const isMobileWithLowMemory = window.innerWidth < 768 && hasDeviceMemory && (navigator as any).deviceMemory < 4;
    
    if (!prefersReducedMotion && !isMobileWithLowMemory) {
      animatables.forEach(element => {
        animationObserver.observe(element);
      });
    } else {
      // Bei reduzierten Bewegungen: Direkt sichtbar machen ohne Animationen
      animatables.forEach(element => {
        element.classList.add("in-view");
      });
    }
  });
</script>
<script>
  // Performance-Monitor initialisieren
  document.addEventListener("DOMContentLoaded", () => {
    // Performance-Monitor importieren und für ganze Seite aktivieren
    import('../utils/performanceMonitor.js').then(({ performanceMonitor }) => {
      performanceMonitor.start();
      
      const performanceToggle = document.getElementById('performanceToggle');

      if (performanceToggle) { // Überprüfe nur, ob der Button existiert
        // Funktion zum Aktualisieren des Icons basierend auf dem Performance-Modus
        function updatePerformanceIcon(isLowMode) {
          if (!performanceToggle) return; // Sicherstellen, dass der Button existiert
          
          performanceToggle.innerHTML = ''; // Altes Icon entfernen (falls vorhanden)
          const icon = document.createElement('i'); // Neues Icon-Element erstellen
          
          if (isLowMode) {
            icon.className = 'fa-solid fa-gauge'; // Icon für Low-Performance-Modus
            icon.setAttribute('title', 'High Performance Modus aktivieren');
          } else {
            icon.className = 'fa-solid fa-gauge-high'; // Icon für High-Performance-Modus
            icon.setAttribute('title', 'Low Performance Modus aktivieren');
          }
          performanceToggle.appendChild(icon); // Neues Icon dem Button hinzufügen
        }
        
        // Initialen Status setzen und Icon erstellen
        updatePerformanceIcon(localStorage.getItem('performance-mode') === 'low');
        
        performanceToggle.addEventListener('click', () => {
          const isLowMode = performanceMonitor.togglePerformanceMode();
          updatePerformanceIcon(isLowMode); // Ruft die aktualisierte Funktion auf
        });
        
        // Listener für Änderungen hinzufügen, falls der Modus anderweitig geändert wird
        performanceMonitor.addListener(updatePerformanceIcon);
      }
    });
  });
</script>
