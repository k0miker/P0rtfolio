---
import "../css/fonts.css";
import "../css/keyframes.css";
import "../css/darkmode.css";
import Nav from "../components/Nav.astro";
import Iam from "../components/Iam.astro";
import Myself from "../components/Myself.astro";
import Projects from "../components/Projects.astro";
import Skills from "../components/Skills.astro";
import Contact from "../components/Contact.astro";
import Footer from "../components/Footer.astro";
import background from "../assets/images/white-geometrical-shapes-background.jpg";
---

<html class="w-full" lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Portfolio</title>
  </head>
  <body class="w-full flex-col items-center content-center fadein2 custom-scrollbar">
    <div id="home"></div>
    <Nav />

    <Iam />

    <div id="about">
      <Myself />
    </div>

    <div id="skills">
      
      <Skills />
    </div>
    <div id="projects" >
      <Projects />
    </div>
    <div id="contact"></div>
    <Contact />

    <Footer />
  </body>
</html>

<style>
  * {
    scroll-behavior: smooth;
    font-family: mono;
    padding: 0;
    margin: 0;
  }
  body {
    overflow-x: hidden;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  #about {
    padding-top: 45px;
  }
  #skills {
    padding-top: 35px;
    height: 100vh;
  }
  #projects {
    padding: 0px 0;
    background-size: 500%;
    background-repeat: no-repeat; 
    background-attachment: fixed; 
    background-position: center;
    animation: slidein2 linear 1055s;
  }
  #contact {
    padding-top: -150px;
  }
  .blurred {
    filter: blur(5px);
  }
  .custom-scrollbar::-webkit-scrollbar {
    width: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: tomato;
    border-radius: 10px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background-color: #00000094;
    border-radius: 5px;
  }
  
</style>

<script>
  // Dark Mode Logic
  document.addEventListener("DOMContentLoaded", () => {
    const darkModeToggle = document.getElementById("darkModeToggle");
    const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");
    
    // Check for saved theme preference or use the system preference
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark" || (!savedTheme && prefersDarkScheme.matches)) {
      document.body.classList.add("dark-mode");
      updateIcon(true);
    } else {
      document.body.classList.remove("dark-mode");
      updateIcon(false);
    }
    
    // Toggle dark mode on click
    darkModeToggle.addEventListener("click", () => {
      const isDarkMode = document.body.classList.toggle("dark-mode");
      localStorage.setItem("theme", isDarkMode ? "dark" : "light");
      updateIcon(isDarkMode);
    });
    
    // Update the icon
    function updateIcon(isDarkMode) {
      // Altes Icon entfernen
      darkModeToggle.innerHTML = '';
      
      // Neues Icon basierend auf Modus hinzufÃ¼gen
      const icon = document.createElement('i');
      if (isDarkMode) {
        icon.className = 'fa-solid fa-sun';
        icon.setAttribute('title', 'Light Mode aktivieren');
      } else {
        icon.className = 'fa-solid fa-moon';
        icon.setAttribute('title', 'Dark Mode aktivieren');
      }
      darkModeToggle.appendChild(icon);
    }
  });
  
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("div[id]");
    const navLinks = document.querySelectorAll("nav a");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navLinks.forEach((link) => {
              if (link.getAttribute("href") === "#" + entry.target.id) {
                link.classList.add("active");
              } else {
                link.classList.remove("active");
              }
            });

          }
        });
      },
      {
        threshold: 0.5, 
        rootMargin: "0px",
      }
    );

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const boxes = document.querySelectorAll(".offscreen");

    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0.2,
    };

    const observerCallback = (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("in-view");
        } else {
          entry.target.classList.remove("in-view");
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions
    );

    boxes.forEach((offscreen) => {
      observer.observe(offscreen);
    });
  });
</script>
