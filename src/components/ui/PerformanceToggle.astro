---
// Komponente für den Performance-Schalter mit erweiterten Optionen für Leistungsoptimierung
---

<div id="performance-controls">
  <button
    id="save-battery"
    class="battery-toggle fixed z-50 p-3 rounded-full shadow-lg focus:outline-none"
    aria-label="Batteriesparmodus umschalten"
  >
    <i class="fa-solid fa-battery-half"></i> <!-- Icon direkt einfügen für sofortige Sichtbarkeit -->
  </button>
  
  <div class="performance-menu" id="performance-menu">
    <div class="menu-header">Performance-Einstellungen</div>
    <div class="menu-item">
      <span>Qualität:</span>
      <div class="quality-selector">
        <button data-quality="high" class="quality-btn">Hoch</button>
        <button data-quality="medium" class="quality-btn">Mittel</button>
        <button data-quality="low" class="quality-btn">Niedrig</button>
      </div>
    </div>
  </div>
</div>

<style>
  .battery-toggle {
    bottom: 20px;
    right: 90px; /* Rechts vom Theme-Toggle */
    padding: .9rem;
    width: 55px;
    height: 55px;
    background-color: var(--bg-secondary);
    border: none; /* Weißen Rand entfernt */
    color: var(--accent);
    transition: all 0.3s ease;
    border-radius: 50%; /* Perfekt rund */
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2); /* Schatten für Tiefeneffekt */
  }
  
  .battery-toggle:hover {
    box-shadow: 0 0 10px 2px var(--pulse-shadow-mid);
    color: var(--accent);
    background-color: var(--bg-secondary);
  }
  
  .battery-toggle:hover i {
    transform: scale(1.2);
    transition: .3s;
  }
  
  .battery-toggle i {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }
  
  /* Aktiv-Status für den Batteriesparmodus */
  .battery-toggle.active {
    background-color: var(--accent);
    color: var(--bg-secondary);
    border: none; /* Auch im aktiven Zustand kein Rand */
  }
  
  /* Performance-Menü */
  .performance-menu {
    position: fixed;
    bottom: 80px;
    right: 90px;
    width: 240px;
    background-color: var(--bg-primary);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 12px;
    z-index: 49;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transform: translateY(10px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }
  
  .performance-menu.visible {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }
  
  .menu-header {
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 10px;
    padding-bottom: 8px;
    border-bottom: 1px solid var(--border);
    color: var(--text-titel);
  }
  
  .menu-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 10px 0;
    font-size: 0.85rem;
    color: var(--text-secondary);
  }
  
  .quality-selector {
    display: flex;
    gap: 4px;
  }
  
  .quality-btn {
    padding: 4px 8px;
    font-size: 0.7rem;
    background-color: var(--bg-secondary);  
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
    color: white;
  }
  
  .quality-btn.active {
    background-color: var(--accent);
    color: white;
  }
  
  @media (max-width: 768px) {
    .battery-toggle {
      bottom: 15px;
      right: 80px;
      padding: 0.75rem;
    }
    
    .battery-toggle i {
      font-size: 1.2rem;
    }
    
    .performance-menu {
      width: 200px;
      right: 80px;
      bottom: 70px;
    }
  }
</style>

<script>
  import { performanceMonitor } from '../../utils/performanceMonitor.js';

  document.addEventListener('DOMContentLoaded', () => {
    const batteryToggle = document.getElementById('save-battery');
    const perfMenu = document.getElementById('performance-menu');
    const qualityBtns = document.querySelectorAll('.quality-btn');
    
    let menuVisible = false;
    
    // Überprüfe den aktuellen Status aus dem localStorage
    const isBatterySaving = localStorage.getItem('battery-saving') === 'true';
    const savedMode = localStorage.getItem('performance-mode') || 'high';
    
    // Setze den visuellen Status entsprechend
    if (isBatterySaving) {
      batteryToggle.classList.add('active');
      batteryToggle.innerHTML = '<i class="fa-solid fa-battery-full"></i>';
      batteryToggle.setAttribute('title', 'Energiesparmodus deaktivieren');
    } else {
      batteryToggle.classList.remove('active');
      batteryToggle.innerHTML = '<i class="fa-solid fa-battery-half"></i>';
      batteryToggle.setAttribute('title', 'Energiesparmodus aktivieren');
    }
    
    // Setze den initialen Performance-Modus aus dem localStorage
    if (performanceMonitor) {
      performanceMonitor.setPerformanceMode(savedMode);
      
      // Aktiven Button markieren
      qualityBtns.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-quality') === savedMode);
      });
    }
    
    // Event-Handler für Klicks auf den Hauptbutton
    batteryToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      
      if (menuVisible) {
        perfMenu.classList.remove('visible');
        menuVisible = false;
      } else {
        perfMenu.classList.add('visible');
        menuVisible = true;
        updatePerformanceDisplay();
      }
    });
    
    // Event-Handler für Qualitätsauswahl
    qualityBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const quality = btn.getAttribute('data-quality');
        
        // Aktiven Button markieren
        qualityBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Performance-Modus im localStorage speichern UND setzen
        localStorage.setItem('performance-mode', quality);
        document.documentElement.setAttribute('data-performance', quality);
        
        // Dann den Performance-Monitor aktualisieren
        if (performanceMonitor) {
          performanceMonitor.setPerformanceMode(quality);
        }
        
        // Batteriesparmodus entsprechend setzen
        const newBatterySavingMode = quality !== 'high';
        localStorage.setItem('battery-saving', newBatterySavingMode.toString());
        
        // Button-Status aktualisieren
        if (newBatterySavingMode) {
          batteryToggle.classList.add('active');
          batteryToggle.innerHTML = '<i class="fa-solid fa-battery-full"></i>';
          batteryToggle.setAttribute('title', 'Energiesparmodus deaktivieren');
        } else {
          batteryToggle.classList.remove('active');
          batteryToggle.innerHTML = '<i class="fa-solid fa-battery-half"></i>';
          batteryToggle.setAttribute('title', 'Energiesparmodus aktivieren');
        }
        
        // Menü schließen nach der Auswahl
        perfMenu.classList.remove('visible');
        menuVisible = false;
        
        // Wenn wir im Low-Mode sind, Hintergründe sofort deaktivieren
        if (quality === 'low') {
          disableAllBackgrounds();
        } else if (quality === 'high') {
          enableAllBackgroundAnimations();
        }
      });
    });
    
    // Vereinfachte Performance-Anzeige ohne FPS
    function updatePerformanceDisplay() {
      if (!menuVisible) return;
      
      // Aktiven Qualitätsbutton markieren
      const mode = performanceMonitor ? performanceMonitor.getPerformanceMode() : localStorage.getItem('performance-mode') || 'high';
      qualityBtns.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-quality') === mode);
      });
      
      // Bei niedrigem Performance-Modus Hintergründe deaktivieren
      if (mode === 'low') {
        disableAllBackgrounds();
      } else if (mode === 'high') {
        // Bei hohem Performance-Modus Hintergründe wieder aktivieren
        enableAllBackgroundAnimations();
      }
    }
    
    // Funktion zum Deaktivieren aller Background-Animationen
    function disableAllBackgrounds() {
      // Canvas-Hintergrundanimationen deaktivieren
      document.querySelectorAll('[id$="-background"]').forEach(bgElement => {
        if (bgElement instanceof HTMLElement) {
          bgElement.style.display = 'none';
        }
      });
      
      // Sektionen auf statischen Hintergrund umstellen statt Hintergrund zu entfernen
      document.querySelectorAll('#contact-section, #skills, #home').forEach(section => {
        if (section instanceof HTMLElement) {
          section.classList.add('static-background');
          section.style.animationPlayState = 'paused';
          section.style.backgroundAttachment = 'scroll';
          
          // Animation entfernen, aber Hintergrund beibehalten
          section.classList.remove('animate');
          
          // Wenn ein Gradienten-Hintergrund im Stylesheet definiert ist, diesen anwenden
          const sectionId = section.id;
          if (sectionId === 'contact-section' || sectionId === 'skills') {
            // Original-Hintergrund speichern, falls noch nicht getan
            if (!section.hasAttribute('data-original-background')) {
              const backgroundImage = section.style.backgroundImage;
              if (backgroundImage) {
                section.setAttribute('data-original-background', backgroundImage);
              }
            }
          }
        }
      });
      
      // CSS-Klasse für statische Hintergründe hinzufügen
      document.documentElement.classList.add('static-backgrounds');
    }
    
    // Funktion zum Aktivieren aller Hintergrund-Animationen
    function enableAllBackgroundAnimations() {
      // Hintergrund-Elemente wieder animieren
      document.querySelectorAll('[id$="-background"]').forEach(bgElement => {
        if (bgElement instanceof HTMLElement) {
          bgElement.style.animationPlayState = '';
          bgElement.style.transition = '';
        }
      });
      
      // Sections mit bewegten Hintergründen aktivieren
      document.querySelectorAll('#contact-section, #skills, #home').forEach(section => {
        if (section instanceof HTMLElement) {
          section.classList.remove('static-background');
          section.style.animationPlayState = '';
          section.style.backgroundAttachment = '';
          
          // Wenn im Viewport, Animation hinzufügen
          if (isElementInViewport(section)) {
            section.classList.add('animate');
          }
        }
      });
      
      // CSS-Klasse für statische Hintergründe entfernen
      document.documentElement.classList.remove('static-backgrounds');
    }
    
    // Hilfsfunktion zur Prüfung, ob Element im Viewport ist
    function isElementInViewport(el) {
      const rect = el.getBoundingClientRect();
      return (
        rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.bottom >= 0
      );
    }
    
    // Initial prüfen, ob wir im Low-Mode sind
    if (savedMode === 'low') {
      disableAllBackgrounds();
    } else if (savedMode === 'high') {
      enableAllBackgroundAnimations();
    }
    
    // Klick außerhalb des Menüs schließt es
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      if (menuVisible && !perfMenu.contains(target) && target !== batteryToggle) {
        perfMenu.classList.remove('visible');
        menuVisible = false;
      }
    });
  });
</script>
