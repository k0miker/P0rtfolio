---
const { project, image, altImage } = Astro.props;

// Verwende cardDescriptionEN mit Fallback-Optionen
const cardDescription = project.cardDescriptionEN || 
                        project.cardDescriptionEn || 
                        project.description?.en || 
                        project.description || 
                        "No description available";

// Stelle sicher, dass die Kategorie immer gesetzt ist
const category = project.category || 'Other';
---

<div class="card-wrapper " data-category={category}>
  <div class="box card-3d offscreen" data-modal-target={`modal-${project.id}`}>
    <div class="card-content">
      <img
        src={image.src}
        alt={project.title}
        loading="lazy"
        class="card-image main-image"
        data-alt-src={altImage ? altImage.src : null}
      />
      <div class="card-overlay">
        <h3 class="card-title">{project.title}</h3>
        <p class="card-tech">
          {project.technologies?.join(" • ") || "No technologies specified"}
        </p>
        <div class="card-description">
          <p>{cardDescription}</p>
        </div>
        <div class="card-badges">
          {project.badges && project.badges.map(badge => (
            <span class="badge">{badge}</span>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .card-wrapper {
    position: relative;
    z-index: 5;
    perspective: 1000px;
  }

  .box {
    position: relative;
    overflow: hidden;
    border-radius: 15px;
    cursor: pointer;
    transform-style: preserve-3d;
    transform: translateZ(0);
    transition: transform 0.5s ease-out;
    background-color: var(--bg-card);
    border-radius: 15px;
    animation: cardGlow 4s ease-in-out infinite alternate;
  }
  
  @keyframes cardGlow {
    0% {
      box-shadow:
      0 0 2px 1px var(--bg-primary),
      0 0 1px 0px var(--accent);
    }
    100% {
      box-shadow:
      0 0 2px 1px var(--bg-primary),
      0 0 5px 0px var(--accent);
    }
  }

  .card-content {
    position: relative;
    width: 100%;
    height: 100%;
    
  }

  .card-image {
    width: 100%;
    height: 300px;
    object-fit: cover;
    object-position: top;
    transition: transform 0.5s ease-out;
  }

  .card-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1.5rem;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.528), rgba(0, 0, 0, 0.306) 70%, transparent);
    color: white;
    transform: translateY(85%);
    transition: transform 0.4s ease-out;
    max-height: 90%;
    overflow-y: auto;
  }

  .card-title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .card-tech {
    font-size: 0.875rem;
    opacity: 0.8;
    margin-bottom: 0.75rem;
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .card-description {
    margin: 0.75rem 0;
    font-size: 0.875rem;
    opacity: 0.9;
    line-height: 1.6;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease;
  }

  .card-description p {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.4;
  }

  .card-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    transition: opacity 0.3s ease-out;
    opacity: 0;
  }

  .badge {
    padding: 0.25rem 0.75rem;
    background-color: var(--accent);
    color: white;
    border-radius: 999px;
    font-size: 0.75rem;
    font-weight: bold;
  }

  /* Hover Effekte */
  .box:hover {
    transform: rotateX(5deg) rotateY(5deg) ;
    animation: cardGlowIntense 1s ease-in-out infinite alternate;
    transition: .5s;
  }
  
  @keyframes cardGlowIntense {
    0% {
      box-shadow: 0 0 15px 0px var(--accent), 0 0 10px 0px var(--accent);
    }
    100% {
      box-shadow: 0 0 5px 0px var(--accent), 0 0 1px 0px var(--accent);
    }
  }

  .box:hover .card-image {
    transform: scale(1.05);
  }

  .box:hover .card-overlay {
    transform: translateY(0);
  }

  .box:hover .card-description {
    max-height: 200px; 
  }

  .box:hover .card-badges {
    opacity: 1;
  }

  /* Touch-Screen Geräte */
  @media (hover: none) {
    .card-description {
      max-height: 80px;
    }
    
    .card-overlay {
     .card-title {
        font-size: .9rem;
      }
      font-size: .8rem;
      line-height: 1.4;
      transform: translateY(0%);
      .card-badges {
        opacity: .8;
      }
      
    }
  }

  /* Performance-optimierte Stile */
  :global([data-performance="low"]) .box {
    transform: none !important;
    animation: none !important;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2) !important;
    opacity: 1 !important;
    visibility: visible !important;
  }
  
  :global([data-performance="low"]) .box:hover {
    transform: none !important;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.3) !important;
    animation: none !important;
  }

  :global([data-performance="low"]) .card-overlay {
    transform: translateY(0%) !important;
    opacity: 1 !important;
  }

  :global([data-performance="low"]) .card-description {
    max-height: 80px !important;
    opacity: 1 !important;
  }

  :global([data-performance="low"]) .card-badges {
    opacity: 0.8 !important;
  }
  
  /* Bei mittlerer Performance reduzierte Effekte */
  :global([data-performance="medium"]) .box {
    animation: simpleGlow 3s ease-in-out infinite alternate !important;
  }
  
  @keyframes simpleGlow {
    from { box-shadow: 0 0 2px 0px var(--accent); }
    to { box-shadow: 0 0 5px 0px var(--accent); }
  }
</style>

<script>
  import { performanceMonitor } from '../../utils/performanceMonitor.js';
  
  document.addEventListener("DOMContentLoaded", function() {
    // Nur 3D-Effekte aktivieren, wenn nicht auf einem mobilen Gerät
    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    
    if (!isMobile) {
      const cards = document.querySelectorAll(".card-3d");
      
      cards.forEach(card => {
        card.addEventListener("mousemove", (e: MouseEvent) => {
          const rect = card.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;
          
          const rotateX = (y - centerY) / 15;
          const rotateY = (centerX - x) / 15;
          
          (card as HTMLElement).style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        });
        
        card.addEventListener("mouseleave", () => {
          (card as HTMLElement).style.transform = 'rotateX(0) rotateY(0)';
        });
      });
    }

    // Statisches Bild anstelle von GIF bei niedriger Performance verwenden
    if (performanceMonitor) {
      const images = document.querySelectorAll('.card-image.main-image');
      
      function updateImages(mode) {
        images.forEach(img => {
          const imgElement = img as HTMLImageElement;
          const altSrc = imgElement.getAttribute('data-alt-src');
          if (altSrc && mode === 'low') {
            // Originalsrc speichern wenn noch nicht getan
            if (!imgElement.getAttribute('data-original-src')) {
              imgElement.setAttribute('data-original-src', imgElement.src);
            }
            // Zu statischem Bild wechseln
            imgElement.src = altSrc;
          } else if (imgElement.getAttribute('data-original-src') && mode !== 'low') {
            // Zurück zum Original
            imgElement.src = imgElement.getAttribute('data-original-src');
          }
        });
      }
      
      // Initial Update und bei Änderungen
      updateImages(performanceMonitor.getPerformanceMode());
      performanceMonitor.onPerformanceModeChange((mode) => {
        updateImages(mode);
      });
    }

    // Sicherstellen, dass die Karten im Low-Performance-Modus sichtbar sind
    const currentMode = document.documentElement.getAttribute('data-performance') || 
                        localStorage.getItem('performance-mode') || 'high';
                        
    if (currentMode === 'low') {
      // Alle Karten sichtbar machen
      document.querySelectorAll('.card-wrapper').forEach(card => {
        if (card instanceof HTMLElement) {
          card.style.opacity = '1';
          card.style.visibility = 'visible';
          card.style.transform = 'none';
        }
      });
      
      document.querySelectorAll('.card-overlay').forEach(overlay => {
        if (overlay instanceof HTMLElement) {
          overlay.style.transform = 'translateY(0)';
          overlay.style.opacity = '1';
        }
      });
    }
  });
</script>
