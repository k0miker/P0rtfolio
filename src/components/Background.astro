---
const { id = "background-canvas", opacity = "0.9", color = "var(--accent)", particleCount = "250" } = Astro.props;
---

<div class="background-container">
  <canvas id={id} class="performance-dependent"></canvas>
</div>

<style define:vars={{ opacity, color }}>
  .background-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -10; 
    overflow: hidden;
    pointer-events: auto; /* Ändere zu auto, damit Mausinteraktion funktioniert */
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: var(--opacity);
    z-index: -10;
  }
</style>

<script type="module" define:vars={{ canvasId: id, userParticleCount: Number(particleCount) }}>
  import { performanceMonitor } from '../utils/performanceMonitor.js';
  
  document.addEventListener("DOMContentLoaded", function() {
    try {
      // Prüfen, ob wir im High-Performance-Modus sind
      const currentMode = document.documentElement.getAttribute('data-performance') || 
                        localStorage.getItem('performance-mode') || 'high';
      
      // Bei nicht-High-Performance-Modi, Canvas nicht initialisieren
      if (currentMode !== 'high') {
        const canvas = document.getElementById(canvasId);
        if (canvas) {
          canvas.style.display = 'none';
        }
        return; // Canvas nicht initialisieren bei niedrigem Leistungsmodus
      }
      
      // Canvas-Element für den Background initialisieren
      const canvas = document.getElementById(canvasId);
      if (!canvas) {
        console.error(`Canvas mit ID "${canvasId}" nicht gefunden!`);
        return;
      }
      
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        console.error("2D Context konnte nicht erstellt werden");
        return;
      }
      
      // CSS-Variablen auslesen für korrekte Farben
      const computedStyle = getComputedStyle(document.documentElement);
      const accentColor = computedStyle.getPropertyValue('--accent').trim() || "#ff5500";
      
      // Performance-basierte Konfiguration mit direkter FPS-Überwachung
      function getPerformanceConfig() {
        const perfMode = document.documentElement.getAttribute('data-performance') || 'high';
        
        switch(perfMode) {
          case 'low':
            return {
              particleMultiplier: 0.25, // Noch weniger Partikel
              connectionDistance: 100,  // Noch kürzere Verbindungslinien
              moreEfficient: true,      // Effizientere Algorithmen
              skipFrames: 3,            // Jeden 4. Frame rendern
              disableMouseInteraction: true // Mausinteraktion deaktivieren
            };
          case 'medium':
            return {
              particleMultiplier: 0.5,  // Hälfte der Partikel
              connectionDistance: 150,  // Kürzere Verbindungslinien
              moreEfficient: true,      // Effizientere Algorithmen
              skipFrames: 1,            // Jeden 2. Frame rendern
              disableMouseInteraction: false
            };
          default: // 'high'
            return {
              particleMultiplier: 0.8,  // 80% der Partikel (für bessere Performance)
              connectionDistance: 200,  // Standard-Verbindungslinien
              moreEfficient: false,     // Standard-Algorithmen
              skipFrames: 0,            // Jeden Frame rendern
              disableMouseInteraction: false
            };
        }
      }
      
      // Aktuelle Performance-Konfiguration
      let perfConfig = getPerformanceConfig();
      
      // Performance-Modus-Änderungen überwachen
      const perfObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.attributeName === 'data-performance') {
            perfConfig = getPerformanceConfig();
            
            // Partikelanzahl neu berechnen und neu initialisieren
            particleCount = calculateParticleCount();
            initParticles();
          }
        });
      });
      
      perfObserver.observe(document.documentElement, { attributes: true });
      
      // FPS-Überwachung für dynamische Anpassungen
      if (typeof performanceMonitor !== 'undefined') {
        performanceMonitor.onFPSChange((fps) => {
          if (fps < 60 && canvas) {
            // Canvas komplett ausblenden bei zu niedrigen FPS
            canvas.style.display = 'none';
          }
          if (fps < 20 && perfConfig.particleMultiplier > 0.2) {
            // Bei sehr niedrigen FPS noch stärker reduzieren
            perfConfig.particleMultiplier = 0.2;
            perfConfig.skipFrames = 4;
            perfConfig.disableMouseInteraction = true;
            perfConfig.connectionDistance = 80;
            
            // Partikel neu initialisieren mit weniger Elementen
            particleCount = calculateParticleCount();
            initParticles();
          }
        });
      }
      
      // Auf Performance-Änderungen reagieren
      if (performanceMonitor) {
        performanceMonitor.onPerformanceModeChange((mode) => {
          if (mode !== 'high') {
            // Nur bei Wechsel zu nicht-High-Modi deaktivieren
            canvas.style.display = 'none';
          } else {
            // Bei High-Modus wieder aktivieren
            canvas.style.display = 'block';
          }
        });
      }
      
      let mouseX = 0;
      let mouseY = 0;
      let mouseActive = false;
      
      // Partikel-Konfiguration
      let particles = [];
      let particleCount = 0;
      
      // Funktion zur Berechnung der Partikelanzahl basierend auf der Canvas-Höhe
      function calculateParticleCount() {
        // Reduzierter Basiswert pro 100 Pixel Höhe
        const baseCountPer100Px = 5;
        
        // Berechnung basierend auf der Canvas-Höhe und dem übergebenen Wert
        const calculatedCount = Math.floor((canvas.height / 100) * baseCountPer100Px);
        
        // Nutze den vom User übergebenen Wert als Faktor
        const userModifier = userParticleCount;
        
        // Performance-Multiplikator anwenden
        const perfMultiplier = perfConfig.particleMultiplier;
        
        // Reduzierte Minimum- und Maximum-Begrenzung
        return Math.max(10, Math.min(60, calculatedCount * (userModifier / 10) * perfMultiplier));
      }
      
      // Canvas-Größe anpassen
      function resizeCanvas() {
        const container = canvas.parentElement;
        if (!container) return;
        
        // Größe des Containers für Canvas verwenden
        const width = container.offsetWidth;
        const height = container.offsetHeight;
        
        // Wenn Container keine vernünftigen Maße hat, Viewport-Größe verwenden
        canvas.width = width > 0 ? width : window.innerWidth;
        canvas.height = height > 0 ? height : window.innerHeight;
        
        // Partikelanzahl neu berechnen basierend auf der neuen Canvas-Höhe
        particleCount = calculateParticleCount();
        
        // Partikel bei Resize neu initialisieren
        initParticles();
      }
      
      // Partikel initialisieren mit gleichmäßigerer Verteilung
      function initParticles() {
        particles = [];
        
        // Grid-basiertes Verteilungssystem für gleichmäßige Verteilung
        const gridSize = Math.sqrt(particleCount);
        const cellWidth = canvas.width / gridSize;
        const cellHeight = canvas.height / gridSize;
        
        // Sicherstellen, dass wir nicht mehr Partikel erstellen als berechnet
        let count = 0;
        
        // Raster durchlaufen
        for (let i = 0; i < gridSize && count < particleCount; i++) {
          for (let j = 0; j < gridSize && count < particleCount; j++) {
            // Position innerhalb der Zelle mit etwas Zufallsvarianz
            const x = (i * cellWidth) + (Math.random() * 0.8 + 0.1) * cellWidth;
            const y = (j * cellHeight) + (Math.random() * 0.8 + 0.1) * cellHeight;
            
            particles.push({
              x: x,
              y: y,
              radius: 3,           
              color: accentColor,
              vx: Math.random() * 0.1 - .025,
              vy: Math.random() * 0.1 - .025,
              life: Math.random(),
              lifeSpeed: 0.0000001 + Math.random() * 0.0000003,
              baseRadius: 3,
              opacity: 1,
            });
            
            count++;
          }
        }
        
        // Falls durch Rundungsfehler zu wenige Partikel erstellt wurden,
        // den Rest zufällig verteilen
        while (count < particleCount) {
          particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            radius: 3,
            color: accentColor,
            vx: Math.random() * 0.1 - .025,
            vy: Math.random() * 0.1 - .025,
            life: Math.random(),
            lifeSpeed: 0.0000001 + Math.random() * 0.0000003,
            baseRadius: 3,
            opacity: 1,
          });
          count++;
        }
      }
      
      let frameCount = 0;
      
      // Animation-Loop mit Performance-Anpassungen
      function animate() {
        requestAnimationFrame(animate);
        
        // Frame-Skipping für niedrige Performance-Modi
        frameCount++;
        if (perfConfig.skipFrames > 0 && frameCount % (perfConfig.skipFrames + 1) !== 0) {
          return;
        }
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Partikel zeichnen und bewegen
        particles.forEach((particle, index) => {
          particle.life += particle.lifeSpeed;
          
          if (particle.life > 1) {
            // Gleichmäßig verteilte Position für neue Partikel finden
            // Position am Rand des Canvas für einen netten "Einflug"-Effekt
            const side = Math.floor(Math.random() * 4); // 0: oben, 1: rechts, 2: unten, 3: links
            let x, y;
            
            switch(side) {
              case 0: // oben
                x = Math.random() * canvas.width;
                y = -10;
                break;
              case 1: // rechts
                x = canvas.width + 10;
                y = Math.random() * canvas.height;
                break;
              case 2: // unten
                x = Math.random() * canvas.width;
                y = canvas.height + 10;
                break;
              case 3: // links
                x = -10;
                y = Math.random() * canvas.height;
                break;
            }
            
            particles[index] = {
              x: x,
              y: y,
              radius: 2,
              color: accentColor,
              vx: Math.random() * 0.1 - .025,
              vy: Math.random() * 0.1 - .025,
              life: 0,
              lifeSpeed: 0.000001 + Math.random() * 0.000003,
              baseRadius: 2,
              opacity: 1
            };
            return;
          }
          
          particle.radius = particle.baseRadius;
          
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
          ctx.fillStyle = particle.color;          
            ctx.globalAlpha = particle.opacity * (1 - particle.life);
            ctx.fillStyle = particle.color;
            ctx.globalAlpha = particle.opacity * (1 - particle.life);
          ctx.fill();
          
          particle.x += particle.vx;
          particle.y += particle.vy;
          
          // Mausinteraktion nur aktivieren wenn Performance es zulässt
          if (mouseActive && !perfConfig.disableMouseInteraction) {
            const canvasRect = canvas.getBoundingClientRect();
            const relMouseX = mouseX - canvasRect.left;
            const relMouseY = mouseY - canvasRect.top;
            
            const dx = relMouseX - particle.x;
            const dy = relMouseY - particle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 170) {
              particle.x += dx * 0.005;
              particle.y += dy * 0.005;
              particle.life = Math.max(0, particle.life - 0.02);
              particle.opacity = 1;
            }
          }
          
          if (particle.x < 0 || particle.x > canvas.width) {
            particle.vx = -particle.vx;
          }
          if (particle.y < 0 || particle.y > canvas.height) {
            particle.vy = -particle.vy;
          }
        });
        
        drawConnections();
      }
      
      function drawConnections() {
        const connectionDistance = perfConfig.connectionDistance;
        
        // Optimierte Verbindungsberechnung für niedrige Performance
        if (perfConfig.moreEfficient) {
          // Weniger Iterationen durch Spatial Partitioning
          const gridSize = Math.ceil(canvas.width / connectionDistance);
          const grid = {};
          
          // Partikel in Grid zuordnen
          particles.forEach((particle, i) => {
            const cellX = Math.floor(particle.x / connectionDistance);
            const cellY = Math.floor(particle.y / connectionDistance);
            const cellKey = `${cellX},${cellY}`;
            
            if (!grid[cellKey]) {
              grid[cellKey] = [];
            }
            grid[cellKey].push(i);
          });
          
          // Nur Partikel in benachbarten Zellen prüfen
          particles.forEach((particle, i) => {
            const cellX = Math.floor(particle.x / connectionDistance);
            const cellY = Math.floor(particle.y / connectionDistance);
            
            // Überprüfe die aktuelle und alle angrenzenden Zellen
            for (let x = cellX - 1; x <= cellX + 1; x++) {
              for (let y = cellY - 1; y <= cellY + 1; y++) {
                const cellKey = `${x},${y}`;
                if (grid[cellKey]) {
                  grid[cellKey].forEach(j => {
                    if (j > i) { // Jedes Paar nur einmal prüfen
                      const dx = particle.x - particles[j].x;
                      const dy = particle.y - particles[j].y;
                      const dist = Math.sqrt(dx * dx + dy * dy);
                      
                      if (dist < connectionDistance) {
                        ctx.beginPath();
                        ctx.globalAlpha = Math.max(.1, 1 - (dist / connectionDistance));
                        ctx.strokeStyle = accentColor;
                        ctx.lineWidth = 1;
                        ctx.moveTo(particle.x, particle.y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.stroke();
                      }
                    }
                  });
                }
              }
            }
          });
        } else {
          // Original-Code für volle Qualität
          for (let i = 0; i < particles.length; i++) {
            for (let j = i + 1; j < particles.length; j++) {
              const dx = particles[i].x - particles[j].x;
              const dy = particles[i].y - particles[j].y;
              const distance = Math.sqrt(dx * dx + dy * dy);
              
              if (distance < connectionDistance) {
                ctx.beginPath();
                ctx.globalAlpha = Math.max(.1, 1 - (distance / connectionDistance));
                ctx.strokeStyle = accentColor;
                ctx.lineWidth = 1;
                ctx.moveTo(particles[i].x, particles[i].y);
                ctx.lineTo(particles[j].x, particles[j].y);
                ctx.stroke();
              }
            }
          }
        }
      }
      
      document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        mouseActive = true;
      });
      
      document.addEventListener('mouseleave', () => {
        mouseActive = false;
      });
      
      setTimeout(() => {
        if (canvas && ctx) {
          resizeCanvas();
          animate();
        }
      }, 500);
      
      window.addEventListener('resize', resizeCanvas);
    } catch (error) {
      console.error("Fehler bei der Background-Initialisierung:", error);
    }
  });
</script>
