---
import Card from "./ui/Card.astro";
import Modal from "./ui/Modal.astro";
import { projects } from "../data/projectData.js";
import "../css/keyframes.css";
import Background from "./Background.astro";

import p1 from "../assets/images/bonsaiworld.jpg";
import p2 from "../assets/images/blome.jpg";
import p5 from "../assets/images/p5.png";
import p4 from "../assets/images/p4.png";
// GIF nicht mehr importieren, nur noch statisches Bild verwenden
import p7static from "../assets/images/p7.2.png";
import p8 from "../assets/images/p8.png";
import p9 from "../assets/images/p9.png";
import p10 from "../assets/images/p10.png";
import p11 from "../assets/images/p11.png";

// Map der Bildimporte zu Projekten, p7 jetzt immer mit statischem Bild
const imageMap = {
  p1,
  p2,
  p4,
  p5,
  // p7 direkt auf statisches Bild umleiten
  p7: p7static,
  p8,
  p9,
  p10,
  p11,
};

// Verbesserung der Filterlogik mit zusätzlicher Prüfung
const filteredProjects = projects.filter(project => {
  const hasImage = !!imageMap[project.image];
  if (!hasImage) {
    console.warn(`Bild für Projekt ${project.title} (${project.image}) fehlt!`);
  }
  return hasImage;
});

// Extrahiere alle einzigartigen Kategorien
const categories = ['All', ...new Set(filteredProjects.map(project => project.category || 'Other'))];
---

<section class="projects-wrapper min-h-full mt-9 relative">
  <Background id="projects-background" opacity="0.5" color="var(--text-secondary)" />
  <h1
    class="text-center mt-4 p-8 text-4xl font-[mono] offscreen hover:tracking-[1vw] hover:text-[tomato] text-[var(--text-primary)]"
  >
    Projects<span class="animate-ping">_</span>
  </h1>

  <!-- Filter Navigation -->
  <div class="filter-container">
    <div class="filter-buttons">
      {categories.map((category) => (
        <button class="filter-btn" data-category={category}>{category}</button>
      ))}
    </div>
  </div>

  {filteredProjects.length === 0 && (
    <p class="text-center text-red-500">Keine Projekte gefunden. Bitte überprüfe die Bildnamen in projectData.js!</p>
  )}

  <div class="projects-container">
    {filteredProjects.map((project) => (
      <Card 
        project={project} 
        image={imageMap[project.image]} 
      />
    ))}
  </div>

  {filteredProjects.map((project) => (
    <Modal 
      project={project} 
      image={imageMap[project.image]}
    />
  ))}
</section>

<style>
  .projects-wrapper {
    padding: 80px 0;
    transition: 1s;
    margin: auto 2vw;
    margin-left: auto;
    margin-right: auto;
    position: relative;
    overflow: hidden;
    min-height: 90vh; /* Garantiert ausreichende Höhe */
    @media screen and (max-width: 768px) {
      margin-top: 0px; 
      padding-top: 0px; 
    }
  }

  /* Filter Styles */
  .filter-container {
    display: flex;
    justify-content: center;
    margin-bottom: 2rem;
    perspective: 1000px;
    position: relative;
    z-index: 10; /* Erhöhter z-index für bessere Klickbarkeit */
  }
  
  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
    transform-style: preserve-3d;
    transform: rotateX(5deg);
    position: relative;
    z-index: 11; /* Erhöhter z-index für die Buttons */
  }
  
  .filter-btn {
    padding: 0.3rem .5rem;
    border-radius: 25px;
    background-color: var(--bg-secondary);
    color: var(--text-titel);
    font-family: mono;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    z-index: 12; 
    white-space: nowrap; 
  }
  
  .filter-btn:hover {
    background-color: var(--accent);
    color: var(--bg-primary);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
  }
  
  .filter-btn.active {
    background-color: var(--accent);
    color: var(--bg-primary);
    font-weight: bold;
  }

  .projects-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
    padding: 2vw 8vw;
    max-width: 1624px;
    margin: 0 auto;
    position: relative;
    z-index: 1;
  }

  /* Masonry Layout mit unterschiedlichen Kartengrößen - im Standard-Modus */
  :root:not([data-performance="low"]) .projects-container > :global(.card-wrapper:nth-child(3n)) {
    grid-row: span 1.2;
  }
  
  :root:not([data-performance="low"]) .projects-container > :global(.card-wrapper:nth-child(4n)) {
    grid-row: span 0.8;
  }

  /* Festes 3x3 Grid Layout im Low-Performance-Modus */
  :global([data-performance="low"]) .projects-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Festes 3-Spalten-Layout */
    gap: 1.5rem;
    width: 100%;
    max-width: 1200px;
  }
  
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper) {
    grid-row: span 1 !important; /* Alle Karten gleich hoch */
    min-height: 300px; /* Mindesthöhe für die Karten */
    height: 100%;
  }

  /* Animation für Karten beim Erscheinen */
  .projects-container > :global(.card-wrapper) {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.6s forwards;
    animation-delay: calc(var(--order) * 0.1s);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  /* Animation für das Einblenden */
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Klasse für animierte Karten */
  :global(.fadeInUp) {
    animation: fadeInUp 0.6s forwards;
  }

  /* Reduzierte Animationen für schwächere Systeme */
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper) {
    animation: none !important;
    transition: none !important;
    opacity: 1 !important;
    visibility: visible !important;
    transform: none !important;
    display: block !important;
    height: auto !important;
    min-height: 300px !important;
    margin-bottom: 1rem !important;
  }
  
  /* Verbesserte Darstellung der Karten im Low-Performance-Modus */
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper) :global(.box) {
    height: 100% !important;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2) !important;
    display: block !important;
  }
  
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper) :global(.card-image) {
    height: 200px !important;
    object-fit: cover !important;
  }
  
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper) :global(.card-overlay) {
    transform: translateY(60%) !important; /* Teilweise sichtbar */
    transition: none !important;
    opacity: 1 !important;
  }
  
  :global([data-performance="low"]) .projects-container > :global(.card-wrapper:hover) :global(.card-overlay) {
    transform: translateY(0) !important; /* Vollständig sichtbar beim Hover */
  }

  /* Sofort alle Karten anzeigen ohne Animation im Low-Performance-Modus */
  :global([data-performance="low"]) .projects-container {
    opacity: 1 !important;
  }
  
  /* Hintergrund im Low-Performance-Modus ausblenden */
  :global([data-performance="low"]) #projects-background {
    display: none !important;
  }

  :global([data-performance="medium"]) .projects-container > :global(.card-wrapper) {
    animation-duration: 0.3s !important;
  }
  
  /* Weitere Optimierungen für schwache Performance */
  :global([data-performance="low"]) #projects-background {
    opacity: 0.2 !important;
  }

  @media screen and (max-width: 768px) {
    .projects-container {
      grid-template-columns: 1fr;
      padding: 1rem;
    }
    
    .filter-container {
      margin-bottom: 1.5rem;
      position: relative;
      padding: 0 0.5rem;
    }
    
    /* Verbesserte mobile Ansicht für Filter-Buttons */
    .filter-buttons {
      flex-wrap: nowrap;
      overflow-x: auto;
      padding: 1rem 0.5rem;
      transform: rotateX(0);
      position: relative;
      gap: 0.75rem;
      -webkit-overflow-scrolling: touch; /* Für besseres Scrollen auf iOS */
      scrollbar-width: none; /* Firefox */
      mask-image: linear-gradient(to right, transparent, black 10px, black 90%, transparent);
      -webkit-mask-image: linear-gradient(to right, transparent, black 10px, black 90%, transparent);
    }
    
    /* Verstecke Scrollbar bei Webkit-Browsern */
    .filter-buttons::-webkit-scrollbar {
      display: none;
    }
    
    .filter-btn {
      padding: 0.6rem 1.2rem;
      font-size: 0.9rem;
      min-width: auto;
      flex: 0 0 auto;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .filter-btn.active {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* Visuelle Hinweise zum Scrollen */
    .filter-container::after {
      content: "";
      position: absolute;
      right: 0.5rem;
      top: 0;
      height: 100%;
      width: 30px;
      background: linear-gradient(to right, transparent, var(--bg-primary) 80%);
      pointer-events: none;
      z-index: 13;
    }
    
    .filter-container::before {
      content: "";
      position: absolute;
      left: 0.5rem;
      top: 0;
      height: 100%;
      width: 30px;
      background: linear-gradient(to left, transparent, var(--bg-primary) 80%);
      pointer-events: none;
      z-index: 13;
    }
  }
  
  /* Noch kleinere Bildschirme */
  @media screen and (max-width: 480px) {
    .filter-btn {
      padding: 0.5rem 1rem;
      font-size: 0.85rem;
    }
    
    .projects-wrapper {
      padding: 60px 0 40px;
    }
    
    /* Zentrierte Anordnung der Filter-Buttons bei sehr kleinen Bildschirmen */
    .filter-buttons {
      justify-content: flex-start;
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }
</style>

<script>
  import { performanceMonitor } from '../utils/performanceMonitor.js';
  
  document.addEventListener("DOMContentLoaded", function () {
    // Performance-basierte Anpassungen
    const currentMode = document.documentElement.getAttribute('data-performance') || 
                      localStorage.getItem('performance-mode') || 'high';
    
    if (currentMode === 'low') {
      // Hintergrund ausblenden
      const projectsBackground = document.getElementById('projects-background');
      if (projectsBackground) {
        projectsBackground.style.display = 'none';
      }
      
      // Grid-Layout für 3x3 Anzeige anpassen
      const projectsContainer = document.querySelector('.projects-container');
      if (projectsContainer instanceof HTMLElement) {
        projectsContainer.style.display = 'grid';
        projectsContainer.style.gridTemplateColumns = 'repeat(3, 1fr)';
        projectsContainer.style.gap = '1.5rem';
      }
      
      // Sichtbarkeit der Projektkarten sicherstellen und Layout verbessern
      document.querySelectorAll('.card-wrapper').forEach(function(card) {
        // Cast to HTMLElement to access style property
        const htmlCard = card as HTMLElement;
        if (htmlCard && htmlCard.style) {
          htmlCard.style.opacity = '1';
          htmlCard.style.visibility = 'visible';
          htmlCard.style.display = 'block';
          htmlCard.style.transform = 'none';
          htmlCard.style.gridRow = 'span 1'; // Alle Karten gleich hoch
          htmlCard.style.minHeight = '300px';
          
          // Box-Element
          const box = card.querySelector('.box') as HTMLElement;
          if (box && box.style) {
            box.style.opacity = '1';
            box.style.visibility = 'visible';
            box.style.transform = 'none';
            box.style.height = '100%';
            box.style.display = 'block';
          }
          
          // Card-Content
          const content = card.querySelector('.card-content') as HTMLElement;
          if (content && content.style) {
            content.style.height = '100%';
          }
          
          // Bild
          const img = card.querySelector('.card-image') as HTMLImageElement;
          if (img && img.style) {
            img.style.height = '200px';
            img.style.objectFit = 'cover';
          }
          
          // Overlay
          const overlay = card.querySelector('.card-overlay') as HTMLElement;
          if (overlay && overlay.style) {
            overlay.style.transform = 'translateY(60%)'; // Teilweise sichtbar
            overlay.style.opacity = '1';
            
            // Hover-Effekt für Overlay beibehalten
            htmlCard.addEventListener('mouseenter', () => {
              overlay.style.transform = 'translateY(0)';
            });
            htmlCard.addEventListener('mouseleave', () => {
              overlay.style.transform = 'translateY(60%)';
            });
          }
        }
      });
      
      // Filter-Buttons auch im Low-Performance-Modus aktivieren
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const category = this.getAttribute('data-category');
          
          // Alle Filter-Buttons deaktivieren
          document.querySelectorAll('.filter-btn').forEach(b => {
            b.classList.remove('active');
          });
          
          // Angeklickten Button aktivieren
          this.classList.add('active');
          
          // Alle Karten filtern
          document.querySelectorAll('.card-wrapper').forEach(card => {
            const cardCategory = card.getAttribute('data-category');
            if (category === 'All' || cardCategory === category) {
              (card as HTMLElement).style.display = 'block';
            } else {
              (card as HTMLElement).style.display = 'none';
            }
          });
        });
      });
    } else {
      // Standard-Filter-Logik für normale Performance-Modi
      initializeFilters();
    }
    
    // Standard-Filter-Logik
    function initializeFilters() {
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const category = this.getAttribute('data-category');
          
          // Alle Filter-Buttons deaktivieren
          document.querySelectorAll('.filter-btn').forEach(b => {
            b.classList.remove('active');
          });
          
          // Angeklickten Button aktivieren
          this.classList.add('active');
          
          // Alle Karten filtern
          document.querySelectorAll('.card-wrapper').forEach(card => {
            const cardCategory = card.getAttribute('data-category');
            if (category === 'All' || cardCategory === category) {
              (card as HTMLElement).style.display = 'block';
            } else {
              (card as HTMLElement).style.display = 'none';
            }
          });
        });
      });
      
      // Initial "All" Button aktivieren
      document.querySelector('.filter-btn[data-category="All"]')?.classList.add('active');
    }
  });
</script>
