---
import Card from "./Card.astro";
import Modal from "./Modal.astro";
import { projects } from "../data/projectData.js";
import "../css/keyframes.css";

import p1 from "../assets/images/bonsaiworld.jpg";
import p2 from "../assets/images/blome.jpg";
import p5 from "../assets/images/p5.png";
import p4 from "../assets/images/p4.png";
import p7 from "../assets/images/p7.gif";
import p8 from "../assets/images/p8.png";
import p9 from "../assets/images/p9.png";
import p10 from "../assets/images/p11.gif";

// Map der Bildimporte zu Projekten
const imageMap = {
  p1,
  p2,
  p4,
  p5,
  p7,
  p8,
  p9,
  p10
};

// Debug-Ausgabe um zu sehen, welche Projekte vorhanden sind
console.log("Projekte vor Filterung:", projects.length);

// Verbesserung der Filterlogik mit zusätzlicher Prüfung
const filteredProjects = projects.filter(project => {
  const hasImage = !!imageMap[project.image];
  if (!hasImage) {
    console.warn(`Bild für Projekt ${project.title} (${project.image}) fehlt!`);
  }
  return hasImage;
});

// Debug-Ausgabe um zu sehen, wie viele Projekte nach Filterung übrig sind
console.log("Projekte nach Filterung:", filteredProjects.length);
---

<section class="wrapperr min-h-full mt-9">
  <h1
    class="text-center mt-4 p-8 text-4xl font-[mono] offscreen hover:tracking-[1vw]  hover:text-[tomato] text-[var(--text-primary)]"
  >
    Projects<span class="animate-ping">_</span>
  </h1>

  {filteredProjects.length === 0 && (
    <p class="text-center text-red-500">Keine Projekte gefunden. Bitte überprüfe die Bildnamen in projectData.js!</p>
  )}

  <div class="container">
    {filteredProjects.map((project) => (
      <Card project={project} image={imageMap[project.image]} />
    ))}
  </div>

  {filteredProjects.map((project) => (
    <Modal project={project} image={imageMap[project.image]} />
  ))}
</section>

<style>
  .wrapperr {
    padding: 80px 0;
    transition: 1s;
    margin: auto 2vw;
    margin-left: auto;
    margin-right: auto;
    @media screen and (max-width: 768px) {
      margin-top: 100px;
    }
  }

  .container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    border-radius: 15px;
    transition: 1s;
    margin-left: auto;
    margin-right: auto;
    width: 100vw;
    padding: 2vw 8vw;
    max-width: 1924px;
    gap: 2vw;
  }

  @media screen and (max-width: 768px) {
    .container {
      flex-direction: column;
      padding: 0;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    let modalTriggers = document.querySelectorAll(".box[data-modal-target]");
    let openModal = null;

    modalTriggers.forEach(function (trigger) {
      trigger.addEventListener("click", function () {
        let modalId = trigger.getAttribute("data-modal-target");
        let modal = document.getElementById(modalId) as HTMLElement;

        if (openModal && openModal !== modal) {
          openModal.style.display = "none";
        }

        if (modal) {
          modal.style.display = "flex";
          openModal = modal;
          setTimeout(() => {
            modal.scrollIntoView({ behavior: "smooth", block: "center" });
          }, 300);
        }
      });
    });

    let closeIcons = document.querySelectorAll(".modal .close");
    closeIcons.forEach(function (icon) {
      icon.addEventListener("click", function () {
        let modal = icon.closest(".modal");
        if (modal) {
          (modal as HTMLElement).style.display = "none";
          openModal = null;
        }
      });
    });

    window.addEventListener("click", function (event) {
      const targetElement = event.target as Element;
      if (targetElement.classList.contains("modal")) {
        (targetElement as HTMLElement).style.display = "none";
        openModal = null;
      }
    });
  });
</script>
