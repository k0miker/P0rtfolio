---
import homeBg from "../assets/images/home.webp";
import inkBg from "../assets/images/ink_2.png";
---
<div class="bg-container" id="home-section" style={`background-image: url(${homeBg.src})`}>
  <div class="console-container font-[Marker] font-extrabold text-4xl">
    <div class="text-backdrop" style={`background-image: url(${inkBg.src})`}></div>
    <span id="text" class="offscreen"></span><div
      class="console-underscore text-[tomato] animate-ping"
      id="console"
    >
      &#95;
    </div>
  </div>
</div>
<style>
  .hidden {
    opacity: 0;
  }
  span {
    min-height: 40px;
  }
  
  a {
    color: var(--text-secondary);
    background-color: var(--bg-primary);
    bottom: 20px;
    width: 75px;
    font-family: inter;
    font-size: 16px;
    font-weight: 600;
    border-radius: 0.5em;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: absolute;
    cursor: pointer;
    transition: all 1s;
    flex-direction: column;
    div {
      padding:0 5px;
    }
  }

  a:hover {
    transform: translateY(5px);
    background-color: var(--bg-primary);
  }
  a:hover div {
    color: tomato;
  }
  a:hover div:nth-of-type(1) {
    display: none;
    div {
      display: block;
    }
  }
  a div:nth-of-type(2) {
    display: none;
  }
  a:hover div:nth-of-type(2) {
    display: block;
    div {
      display: block;
    }
  }

  .bg-container{
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    transition: animation-play-state 0.3s;
    min-height: 100vh;
  }
  
  .bg-container.animate {
    animation: slidein linear 25s infinite alternate;
  }

  .console-container {
    color: white;
    box-shadow: inset 0px -2vh 5vw 10px #0000006f;
    
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    
    position: relative;
    z-index: 1;
    top: 0;
    left: 0;
    right: 0;
    bottom: -30px;
    margin: auto;
  }
  
  /* Text-Styling mit starkem Schatten für bessere Lesbarkeit */
  #text {
    text-shadow: 
      0px 0px 10px rgba(0, 0, 0, 0.9),
      0px 0px 20px rgba(0, 0, 0, 0.7),
      0px 0px 30px rgba(0, 0, 0, 0.5);
    position: relative;
    z-index: 3;
  }
  
  /* Tintenhintergrund für den Text */
  .text-backdrop {
    position: absolute;
    width: 100%;
    max-width: 600px;
    height: 300px;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.55;
    filter: contrast(1.2) brightness(0.6);
    transform: scale(1.2);
    z-index: 2;
    pointer-events: none;
  }
  
  .console-underscore {
    display: inline-block;
    position: relative;
    top: 0;
    left: 10px;
    z-index: 3;
    text-shadow: 0 0 10px rgba(255, 99, 71, 0.7); /* Glow-Effekt für den Cursor */
  }
  
  /* Performance-bezogene Styles - überarbeitete Version */
  :global([data-performance="low"]) .bg-container,
  :global(body[data-performance="low"]) #home-section {
    animation: none !important;
    background-attachment: scroll !important;
    background-position: center center !important;
    background-size: cover !important;
  }
  
  /* Responsive Anpassungen für verschiedene Bildschirmgrößen */
  @media screen and (max-width: 768px) {
    .console-container {
      font-size: 1.5em;
    }
    
    .text-backdrop {
      max-width: 90%;
      height: 350px;
      transform: scale(1.1);
    }
    
    #text {
      text-shadow: 
        0px 0px 8px rgba(0, 0, 0, 0.607),
        1px 1px 6px rgba(0, 0, 0, 0.2);
    }
  }
  
  @media screen and (max-width: 480px) {
    .text-backdrop {
      max-width: 95%;
      height: 420px;
    }
  }
</style>
<script>
  // function([string1, string2],target id,[color1,color2])
  consoleText(
    [
      "Hey there.",
      "I'm Colin.",
      "Web Developer.",
      "Gamer.",
      "Bonsai Enthusiast.",
      "Nerd.",
    ],
    "text",
    ["tomato"]
  );
  function consoleText(words, id, colors) {
    if (colors === undefined) colors = ["#fff"];
    let visible = true;
    let con = document.getElementById("console");
    let letterCount = 1;
    let x = 1;
    let waiting = false;
    let target = document.getElementById(id);
    target.setAttribute("style", "color:" + colors[0]);
    window.setInterval(function () {
      if (letterCount === 0 && waiting === false) {
        waiting = true;
        target.innerHTML = words[0].substring(0, letterCount);
        window.setTimeout(function () {
          let usedColor = colors.shift();
          colors.push(usedColor);
          let usedWord = words.shift();
          words.push(usedWord);
          x = 1;
          target.setAttribute("style", "color:" + colors[0]);
          letterCount += x;
          waiting = false;
        }, 300);
      } else if (letterCount === words[0].length + 1 && waiting === false) {
        waiting = true;
        window.setTimeout(function () {
          x = -1;
          letterCount += x;
          waiting = false;
        }, 500);
      } else if (waiting === false) {
        target.innerHTML = words[0].substring(0, letterCount);
        letterCount += x;
      }
    }, 80);
    
  }

  // Animation nur starten, wenn Sektion im Viewport ist und Performance-Modus es erlaubt
  document.addEventListener("DOMContentLoaded", () => {
    const homeSection = document.getElementById("home-section");
    if (!homeSection) return;
    
    // Prüfen, ob Animationen deaktiviert werden sollen
    function updateAnimation(isLowPerformance) {
      if (isLowPerformance) {
        console.log("Deaktiviere Home-Animation (Low-Performance)");
        homeSection.classList.remove("animate");
        homeSection.style.backgroundAttachment = "scroll";
        homeSection.style.backgroundPosition = "center center";
      } else {
        console.log("Aktiviere Home-Animation (High-Performance)");
        // Nur aktivieren, wenn sichtbar
        if (isElementInViewport(homeSection)) {
          homeSection.classList.add("animate");
          homeSection.style.backgroundAttachment = "fixed";
        }
      }
    }
    
    // Performance-Monitor für Animationssteuerung
    import('../utils/performanceMonitor.js').then(({ performanceMonitor }) => {
      performanceMonitor.addListener(updateAnimation);
    }).catch(err => console.error("Fehler beim Laden des Performance-Monitors:", err));
    
    // Sichtbarkeits-Observer für verzögerte Animation
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Nur animieren wenn High-Performance AND sichtbar
        const currentMode = document.documentElement.getAttribute('data-performance') || 'high';
        
        if (entry.isIntersecting && currentMode !== 'low') {
          console.log("Home-Sektion sichtbar, aktiviere Animation");
          entry.target.classList.add("animate");
        } else {
          entry.target.classList.remove("animate");
        }
      });
    }, { threshold: 0.1 });
    
    observer.observe(homeSection);
    
    // Hilfsfunktion zur Prüfung, ob Element im Viewport ist
    function isElementInViewport(el) {
      const rect = el.getBoundingClientRect();
      return (
        rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.bottom >= 0
      );
    }
  });
</script>
