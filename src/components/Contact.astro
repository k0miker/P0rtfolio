---
import Button from "./Button.astro";
import contactBg from "../assets/images/contact.webp";

---

<section 
  class="flex flex-col items-center content-center min-h-[70vh] p-2" 
  id="contact-section"
  style={`background-image: url(${contactBg.src})`}
>
  <div class="card offscreen">
    <div class="header  font-[mono] text-[1.5rem] hover:tracking-[1vw] hover:text-[tomato] text-[var(--text-primary)] duration-500">
      Get in touch<span class="animate-ping">_</span><span class="animate-ping font-sans text-2xl">!</span>
    </div>
    <div class="body form-bg ">
      <form
        name="contact"
        data-netlify="true"
        data-netlify-honeypot="bot-field"
        method="POST"    
      >
        <input type="hidden" name="bot-field" />
        <div class="input-group">
          <input
            required
            type="text"
            name="name"
            class="input"
            id="name"
          />
          <label class="user-label" for="name">First Name</label>
        </div>
        <div class="input-group">
          <input
            required
            type="email"
            name="email"
            class="input"
            id="mail"
          />
          <label class="user-label" for="mail">E-Mail</label>
        </div>
        <div class="input-group">
          <textarea
            required
            name="text"
            rows="5"
            autocomplete="off"
            class="textarea input"
            id="message"></textarea>
          <label class="user-label" for="message">Message</label>
        </div>
        <div class="mt-4">
          <div class="toggle-switch">
            <input type="checkbox" required id="toggle" class="toggle-input checkbox" />
            <label for="toggle" class="toggle-label"></label>
          </div>
          I agree to the <a
            href="https://www.netlify.com/privacy/"
            target="_blank"
            class="underline text-base toggle-switch-label">privacy policy.</a
          >
        </div>
        <Button class="button" disabled />
        <div class="direct-contact">
          <hr class="contact-divider" />
          <p class="contact-option-text">Oder kontaktieren Sie mich jetzt direkt:</p>
          <div class="contact-options">
            <div class="contact-option email-option">
              <i class="fas fa-envelope"></i>
              <div class="contact-info-reveal">
                <span class="email-text">info@colinblome.dev</span>
                <button class="copy-btn" data-copy="info@colinblome.dev">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
            <div class="contact-option phone-option">
              <i class="fas fa-phone"></i>
              <div class="contact-info-reveal">
                <span class="phone-text">0173-609-8320</span>
                <button class="copy-btn" data-copy="017360983320">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</section><style>
  section {
    align-items: center;
    justify-content: center;
    min-height: 95vh;
    padding: 5vw;
    background-size: cover;
    box-shadow: inset 0px -2vh 10vw 10px var(--shadow-strong);
    background-attachment: fixed;
    transition: animation-play-state 0.3s;
  }

  section.animate {
    animation: slidein linear 25s infinite alternate;
  }

  section.static-background {
    background-attachment: scroll;
  }

  .card {
    display: flex;
    flex-direction: column;
    max-width: 768px;
    width: 90%;
    height: fit-content;
    box-shadow: var(--card-shadow), var(--card-border-glow);
    border-radius: 10px;
    overflow: hidden;
    margin-left: auto;
    margin-right: auto;
    position: relative;
    transition: box-shadow 0.4s ease, transform 0.4s ease;
    will-change: transform, box-shadow;
  }

  .header {
    background-color: var(--bg-secondary);
    color: #fff;
    padding: 15px;
    text-align: center;
  }

  .body {

    padding-top: 40px;
    padding: 20px;
    background-color: var(--form-bg);
  }

  .form-bg {
    background-color: var(--form-bg);
  }
  form {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
  }
  span:nth-child(2) {
    display: none;
  }
  h1:hover span:nth-child(1) {
    display: none;
  }
  h1:hover span:nth-child(2) {
    display: inline-block;
  }
  .input-group {
    position: relative;
    padding: 12px;
  }

  .input {
    border: solid 1.5px var(--input-border);
    border-radius: 0.5rem;
    background: var(--input-bg);
    padding: 0.3rem;
    padding-left: 1rem;
    font-size: 1rem;
    color: var(--input-text);
    transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    width: 80vw;
    flex-grow: 1;
    max-width: 400px;
  }
  .textarea {
    border: solid 1.5px var(--input-border);
    border-radius: 1rem;
    font-size: 1rem;
    color: var(--input-text);
    transition: border 150ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  .user-label {
    position: absolute;
    left: 35px;
    top: 8px;
    font-family: mono;
    font-size: 0.8rem;
    font-weight: 700;
    color: var(--label-text);
    pointer-events: none;
    transform: translateY(1rem);
    transition: 550ms cubic-bezier(0.4, 0, 0.2, 1);
  }
  label:hover {
    color: var(--accent);
  }

  .input:focus,
  .input:valid {
    outline: none;
    outline: 2px solid var(--input-focus);
  }
  .input:focus {
  }
  .input:focus ~ label,
  .input:valid ~ label {
    left: 15px;
    top: -26px;
    background-color: transparent;
    padding: 0 0.2em;
    color: var(--accent);
  }
  
  .toggle-switch {
  position: relative;
  display: inline-block;
  width: 40px;
  top:5px;
  height: 25px;
}

.toggle-switch .toggle-input {
  display: none;
}
.toggle-switch-label {
  padding-bottom: 15px;
  color: var(--text-primary);
}
  
.toggle-switch .toggle-label {

  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 24px;
  background-color: var(--toggle-off-bg);
  border-radius: 14px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.toggle-switch .toggle-label::before {
  content: "";
  position: absolute;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  top: 2px;
  left: 2px;
  background-color: #fff;
  box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.3);
  transition: transform 0.3s;
}

.toggle-switch .toggle-input:checked + .toggle-label {
  background-color: var(--toggle-on-bg);
}

.toggle-switch .toggle-input:checked + .toggle-label::before {
  transform: translateX(16px);
}
.highlight {
  animation: highlight 0.5s;
}
@keyframes highlight {
  0% {
    scale: 1;
  }
  50{
    scale: 1.1;
  }
  100% {
    background-color: #33333391;
  }
}

/* Stil für deaktivierte Animationen */
#contact-background.no-animation {
  animation: none !important;
  transition: none !important;
}

:global([data-performance="low"]) #contact-section {
  background-attachment: scroll !important;
 
}

/* Performance-bezogene Styles - überarbeitete und verstärkte Version */
:global([data-performance="low"]) section,
:global([data-performance="low"]) #contact-section,
:global(body[data-performance="low"]) section,
:global(body[data-performance="low"]) #contact-section {
  animation: none !important;
  background-attachment: scroll !important;
  background-position: center center !important;
  background-size: cover !important;
}

/* Direkte Kontaktmöglichkeiten */
.direct-contact {
    width: 100%;
    max-width: 668px;
    margin-top: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .contact-divider {
    width: 80%;
    border: 0;
    height: 1px;
    background-image: linear-gradient(to right, transparent, var(--accent), transparent);
    margin-bottom: 1.5rem;
  }
  
  .contact-option-text {
    color: var(--text-primary);
    font-size: 1rem;
    margin-bottom: 1.5rem;
    font-weight: 500;
    font-family: 'mono', monospace;
    letter-spacing: 0.5px;
  }
  
  .contact-options {
    display: flex;
    gap: 2rem;
    justify-content: center;
    width: 100%;
  }
  
  .contact-option {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--bg-secondary);
    border-radius: 8px;
    transition: all 0.3s ease;
    cursor: pointer;
    border: 1px solid rgba(255, 99, 71, 0.1);
    position: relative;
  }
  
  .contact-option i {
    font-size: 1.2rem;
    color: var(--accent);
    transition: all 0.3s ease;
  }
  
  .contact-option:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: translateY(-3px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    border-color: rgba(255, 99, 71, 0.3);
  }
  
  .contact-info-reveal {
    display: none;
    position: absolute;
    top: -45px;
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--bg-secondary);
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    white-space: nowrap;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid rgba(255, 99, 71, 0.2);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 5;
  }
  
  .contact-option.active .contact-info-reveal {
    display: flex;
    opacity: 1;
    visibility: visible;
  }
  
  .contact-info-reveal::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 50%;
    transform: translateX(-50%) rotate(45deg);
    width: 10px;
    height: 10px;
    background-color: var(--bg-secondary);
    border-right: 1px solid rgba(255, 99, 71, 0.2);
    border-bottom: 1px solid rgba(255, 99, 71, 0.2);
  }
  
  .email-text, .phone-text {
    font-family: 'mono', monospace;
    letter-spacing: 0.5px;
    color: var(--text-primary);
    font-size: 0.9rem;
  }
  
  .copy-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    font-size: 0.9rem;
    padding: 0.2rem;
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  .copy-btn:hover {
    color: var(--accent);
  }
  
  .copy-btn.copied {
    color: #4CAF50;
  }
  
  @media (max-width: 768px) {
    .contact-options {
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }
    
    .contact-option {
      width: 80%;
    }
  }
  
  @media (max-width: 480px) {
    .contact-divider {
      margin-bottom: 1rem;
    }
    
    .contact-option-text {
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }
    
    .contact-option {
      padding: 0.5rem 1rem;
    }
  }
</style>

<script>  
  const form = document.querySelector("form");
  const input = document.querySelector(".checkbox") as HTMLInputElement;
  const toggle = document.querySelector(".toggle-switch");
  const toggleLabel = document.querySelector(".toggle-label");

  form.addEventListener("submit", (event) => {
    if (!input.checked) {
      event.preventDefault();
      toggle.classList.add("highlight");
      toggleLabel.classList.add("highlight");
      setTimeout(() => {
        toggle.classList.remove("highlight");
        toggleLabel.classList.remove("highlight");
      }, 500);
    }
  });

  // Animation nur starten, wenn Sektion im Viewport ist
  document.addEventListener("DOMContentLoaded", () => {
    const contactSection = document.getElementById("contact-section");
    if (!contactSection) return;
    
    // Funktion zum Aktualisieren des Animationsstatus
    function updateAnimation(isLowPerformance) {
      if (isLowPerformance) {
        console.log("Deaktiviere Contact-Animation (Low-Performance)");
        contactSection.classList.remove("animate");
        contactSection.classList.add("static-background");
        contactSection.style.backgroundAttachment = "scroll";
        contactSection.style.backgroundPosition = "center center";
      } else {
        console.log("Aktiviere Contact-Animation (High-Performance)");
        contactSection.classList.remove("static-background");
        contactSection.style.backgroundAttachment = "fixed";
        
        // Nur aktivieren, wenn im Viewport
        if (isElementInViewport(contactSection)) {
          contactSection.classList.add("animate");
        }
      }
    }
    
    // Performance-Monitor für Animationssteuerung laden
    import('../utils/performanceMonitor.js').then(({ performanceMonitor }) => {
      performanceMonitor.addListener(updateAnimation);
    }).catch(err => console.error("Fehler beim Laden des Performance-Monitors:", err));
    
    // Sichtbarkeits-Observer für verzögerte Animation
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Performance-Modus bei jedem Intersect-Event neu prüfen
        const currentMode = document.body.getAttribute('data-performance') || 
                          document.documentElement.getAttribute('data-performance') || 'high';
        
        if (entry.isIntersecting && currentMode !== 'low') {
          console.log("Contact-Sektion sichtbar, aktiviere Animation");
          entry.target.classList.add("animate");
        } else {
          entry.target.classList.remove("animate");
        }
      });
    }, { threshold: 0.1 });
    
    observer.observe(contactSection);
    
    // Hilfsfunktion zur Prüfung, ob Element im Viewport ist
    function isElementInViewport(el) {
      const rect = el.getBoundingClientRect();
      return (
        rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.bottom >= 0
      );
    }
  });
  
  document.addEventListener("DOMContentLoaded", () => {
    // Kontaktoptionen Interaktivität
    const contactOptions = document.querySelectorAll('.contact-option');
    contactOptions.forEach(option => {
      option.addEventListener('click', function() {
        // Andere offene Optionen schließen
        contactOptions.forEach(otherOption => {
          if (otherOption !== option) {
            otherOption.classList.remove('active');
          }
        });
        
        // Toggle für aktiven Zustand
        this.classList.toggle('active');
      });
    });
    
    // Außerhalb klicken, um zu schließen
    document.addEventListener('click', function(e) {
      const target = e.target as HTMLElement;
      const isOutsideContact = !target.closest('.contact-option');
      if (isOutsideContact) {
        contactOptions.forEach(option => {
          option.classList.remove('active');
        });
      }
    });
    
    // Kopieren-Funktionalität
    const copyButtons = document.querySelectorAll('.copy-btn');
    copyButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation(); // Verhindern, dass der Kontaktbutton-Click ausgelöst wird
        
        const textToCopy = this.getAttribute('data-copy');
        navigator.clipboard.writeText(textToCopy).then(() => {
          // Visuelle Bestätigung
          this.classList.add('copied');
          const originalIcon = this.innerHTML;
          this.innerHTML = '<i class="fas fa-check"></i>';
          
          setTimeout(() => {
            this.classList.remove('copied');
            this.innerHTML = originalIcon;
          }, 2000);
        });
      });
    });
    
    // E-Mail und Telefon Links öffnen bei Klick auf die Inhalte
    const emailText = document.querySelector('.email-text');
    if (emailText) {
      emailText.addEventListener('click', (e) => {
        e.stopPropagation();
        window.location.href = 'mailto:info@colinblome.dev';
      });
    }
    
    const phoneText = document.querySelector('.phone-text');
    if (phoneText) {
      phoneText.addEventListener('click', (e) => {
        e.stopPropagation();
        window.location.href = 'tel:+4917360983320';
      });
    }
  });
</script>